// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum Role {
  admin
  member
}

model Tenant {
  id           String    @id @default(cuid())
  name         String
  userId       String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  users        User[]
  completions  Completion[]
}


model User {
  id                    String     @id @default(uuid())
  tenantId              String     @map("tenant_id")
  name                  String
  email                 String?    @unique
  emailVerified         DateTime?  @map("email_verified")
  image                 String?
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  accounts              Account[]
  completions           Completion[]
  tenant                Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  role                  Role
  @@map("users")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String    @map("user_id")
  type               String?
  provider           String
  providerAccountId  String    @map("provider_account_id")
  token_type         String?
  refresh_token      String?   @db.Text
  access_token       String?   @db.Text
  expires_at         Int?
  scope              String?
  id_token           String? @db.Text
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Completion {
  id            String    @id @default(cuid())
  tenantId      String    @map("tenant_id")
  title         String
  userId        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}
