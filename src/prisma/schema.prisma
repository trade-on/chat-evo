// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum AIModel {
  GPT4
  GPT35
}

enum ChatIOType {
  INPUT
  OUTPUT
}

enum UserRole {
  admin
  member
}

enum ChatRole {
  system
  user
  assistant
  function
  tool
}

model Tenant {
  id           String    @id @default(cuid())
  name         String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  users        User[]
  chatThread  ChatThread[]
  chatMessage   ChatMessage[]
  invitation  Invitation[]
  Tokens      Token[]
}


model User {
  id                    String        @id @default(uuid()) @unique
  tenantId              String        @map("tenant_id")
  name                  String?
  email                 String        @unique
  emailVerified         DateTime?     @map("email_verified")
  firstLogin            Boolean?      @map("first_login") @default(true)
  image                 String?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  role                  UserRole      @default(member)
  accounts              Account[]
  chatThreads           ChatThread[]
  chatMessages          ChatMessage[]
  tenant                Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  prompt                Prompt[]
  Tokens      Token[]

@@map("users")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String    @map("user_id")
  provider           String
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ChatMessage {
  id               String      @id @default(cuid())  @unique
  threadId         String      @map("thread_id")
  tenantId       String        @map("tenant_id")
  userId           String?     @map("user_id")
  tokenId           String     @unique
  name             String? // fuction callingç”¨???
  content          String
  role             ChatRole
  isDeleted        Boolean     @default(false)
  model            AIModel
  multiModalImage  String?
  ioType           ChatIOType
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  user             User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatThread       ChatThread  @relation(fields: [threadId], references: [id], onDelete: Cascade)
  tenant           Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  token            Token      @relation(fields: [tokenId], references: [id])
}

model ChatThread {
  id                    String        @id @default(cuid())
  tenantId              String        @map("tenant_id")
  title                 String    
  isDeleted             Boolean       @default(false)
  userId                String
  userName              String
  lastMessageAt         DateTime
  bookmarked            Boolean       @default(false)
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  user                  User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant                Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  chatMessage           ChatMessage[]
  tokens                Token[]
}

model Prompt {
  id             String    @id @default(cuid())
  category       String
  name           String
  description    String
  userId         String
  isPublished    Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Invitation {
  id                  String    @id @default(cuid())
  inviteToEmail       String    @unique
  role                UserRole
  inviteFromUserId    String
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  tenantId            String
  tenant              Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model Token {
  id                  String      @id @default(cuid()) @unique
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  ioType              ChatIOType
  model               AIModel
  count               Int
  tenantId            String
  tenant              Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId              String
  user                 User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  threadId            String
  chatThread          ChatThread  @relation(fields: [threadId], references: [id], onDelete: Cascade)
  chatMessageId       String      @unique
  chatMessage         ChatMessage?
}
