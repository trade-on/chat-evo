// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum UserRole {
  admin
  member
}

enum ChatRole {
  system
  user
  assistant
  function
  tool
}

model Tenant {
  id           String    @id @default(cuid())
  name         String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  users        User[]
  chatThread  ChatThread[]
}


model User {
  id                    String     @id @default(uuid())
  tenantId              String     @map("tenant_id")
  name                  String?
  email                 String    @unique
  emailVerified         DateTime?  @map("email_verified")
  firstLogin            Boolean?  @map("first_login") @default(true)
  image                 String?
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  role                  UserRole   @default(member)
  accounts              Account[]
  chatThreads           ChatThread[]
  chatMessages          ChatMessage[]
  tenant                Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  prompt                Prompt[]
@@map("users")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String    @map("user_id")
  provider           String
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ChatMessage {
  id               String     @id @default(cuid())
  threadId         String     @map("thread_id")
  userId           String?     @map("user_id")
  name             String? // fuction callingç”¨???
  content          String
  role             ChatRole
  isDeleted        Boolean    @default(false)
  multiModalImage  String?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  user             User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatThread       ChatThread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  // @@map("chat_messages")

}

model ChatThread {
  id             String    @id @default(cuid())
  tenantId       String    @map("tenant_id")
  title          String
  isDeleted      Boolean   @default(false)
  userId         String
  userName       String
  lastMessageAt  DateTime
  bookmarked     Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant        Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  chatMessage   ChatMessage[]

}

model Prompt {
  id             String    @id @default(cuid())
  name           String
  description    String
  userId         String
  isPublished    Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}
